#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Rapport de projet informatique : INSAtram
\end_layout

\begin_layout Author
Alix ANNERAUD - Myriem ABID - Hugo LASCOUTS
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/alix_anneraud/Git/INSAtram/Resources/Images/Logo.png
	width 20page%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction.
\end_layout

\begin_layout Subsection
Présentation
\end_layout

\begin_layout Standard
Dans le cadre du projet informatique que nous réalisons suite aux cours
 de I1 et I2, nous avons décidé de développer un jeu en Pascal.
 Le nom du projet est 
\begin_inset Quotes fld
\end_inset

INSAtram
\begin_inset Quotes frd
\end_inset

 où 
\begin_inset Quotes fld
\end_inset

Tram
\begin_inset Quotes frd
\end_inset

 fait référence au moyen de transport urbain.
 Le jeu consiste en la construction et gestion d'un réseau de transport
 ferroviaire.
 C'est pourquoi l'identité graphique du jeu s'apparente aux cartes de réseau
 disponibles dans les transports en commun.
 Le concept n'est pas original puisqu'il est inspiré du jeu 
\begin_inset Quotes fld
\end_inset

Mini Metro
\begin_inset Quotes frd
\end_inset

 de l'éditeur 
\begin_inset Quotes fld
\end_inset

Dinosaur Polo Club
\begin_inset Quotes frd
\end_inset

.
 L'objectif du joueur est d'acheminer des passagers vers leur destination,
 et ce, de manière optimale.
 Plusieurs stations, qu'il faudra relier entre elles, apparaissent au cours
 de la partie.
 Les passagers apparaissent à côté de leur station de départ et empruntent
 la ou les lignes qui desservent leur station an d'atteindre leur destination.
 Ce projet était à réaliser en groupe, le nôtre était composé de 3 membres.
 Par conséquent, en plus de la mobilisation des connaissances acquises en
 informatique, il était nécessaire de prendre en compte le travail de groupe
 et donc la communication ainsi que la répartition des tâches.
 Cette dimension, bien qu'indispensable, a rajouté une difficulté à la planifica
tion du projet.
 En effet, jusqu'ici, nous étions habitués à travailler de manière individuelle
 et sans trop se soucier d'établir un plan de projet de A à Z.
 Nous présentons dans ce rapport notre façon d'appréhender ce nouvel exercice.
 Le répertoire du projet est disponible à l'adresse : https://github.com/AlixANNE
RAUD/INSAtram.
\end_layout

\begin_layout Subsection
Cahier des charges initial
\end_layout

\begin_layout Standard
Voici un rappel du cahier des charges.
 Les 
\bar under
parties soulignées
\bar default
 sont les fonctionnalités optionnelles et leur réalisation est faite suivant
 l'avancement du projet :
\end_layout

\begin_layout Itemize

\series bold
Interface graphique : 
\series default
L’interface graphique comportera les éléments suivants :
\end_layout

\begin_deeper
\begin_layout Itemize
Un menu de démarrage permettant de démarrer une partie.
\end_layout

\begin_layout Itemize
Un terrain de jeu contenant tous les éléments de la partie (score, temps,
 inventaire).
\end_layout

\begin_layout Itemize
Un bilan à la fin de la partie (au game over) affichant le score du joueur.
\end_layout

\begin_layout Itemize
La présence de couleurs tout en gardant une interface épurée.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Temps :
\series default
 Organisé en jours et semaines (jour : ~20 secondes, 1 semaine : ~140 secondes).
 Il détermine en partie le score final du joueur.
 Il est possible de mettre en pause et de reprendre le temps.
\end_layout

\begin_layout Itemize

\series bold
\bar under
Son :
\series default
\bar default
 Le jeu comprend une musique de fond apaisante pour mettre le joueur dans
 l'ambiance du jeu.
 
\end_layout

\begin_layout Itemize

\series bold
Objets :
\series default
 Ce sont les éléments avec lesquels le joueur peut interagir.
 Tous les objets sont présents en début de partie en quantité limitée et
 peuvent être obtenus à la fin de chaque semaine.
 Les objets seront les suivants :
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Locomotives :
\series default
 Elles effectuent des allers-retours sur les lignes afin d'acheminer les
 voyageurs de station en station.
\end_layout

\begin_layout Itemize

\series bold
Lignes : 
\series default
Ce sont les infrastructures permettant aux véhicules de circuler de station
 en station.
 Le joueur les dessine et peut les modifier au cours de la partie.
\end_layout

\begin_layout Itemize

\series bold
Wagons :
\series default
 Ce sont des véhicules pouvant être ajoutés à une locomotive afin d'augmenter
 le nombre de passagers qu'elle peut transporter en une seule fois.
\end_layout

\begin_layout Itemize

\series bold
Tunnels :
\series default
 Ce sont les objets permettant à une ligne de traverser une rivière.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Entités :
\series default
 Ce sont les éléments qui sont disposés sur le terrain de jeu par le programme.
 Les entités seront les suivantes : 
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Stations :
\series default
 Elles sont de différentes formes géométriques et sont générées de manière
 aléatoire.
 Elles apparaissent à des instants t déterminés par une fonction.
\end_layout

\begin_layout Itemize

\series bold
Passagers :
\series default
 Ils sont également de différentes formes géométriques (correspondant à
 leur station d'arrivée) et ils apparaissent à côté des stations à des instants
 t déterminés par une fonction.
 Ces passagers disparaissent une fois arrivés à destination.
 L'algorithme de Dijkstra est utilisé afin de calculer les itinéraires des
 passagers.
\end_layout

\begin_layout Itemize

\series bold
Rivières :
\series default
 Les différentes cartes comprennent une ou plusieurs rivières qui font office
 d'obstacles naturels.
 Elles doivent être contournées à l'aide d'un tunnel.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Difficulté :
\series default
 La difficulté du jeu réside dans le fait de devoir fluidifier au maximum
 le trafic et d'adapter le réseau en fonction des nouvelles stations qui
 apparaissent, le flux de passagers ainsi que des différents aléas
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Fin de partie :
\series default
 La partie prend fin une fois qu'une station est engorgée (quand plus de
 6 passagers s'y trouvent) pendant 40 secondes.
 Un chronomètre apparaît à côté de la/des stations surchargée(s) pour indiquer
 le temps restant au joueur.
 Si ce temps est dépassé alors que la station est encore encombrée, le joueur
 perd.
\end_layout

\end_deeper
\begin_layout Section
Structure
\end_layout

\begin_layout Standard
Au début du projet, nous avons essayé d'être le plus rigoureux possible
 lorsque l'on a déterminé sa structure.
 Cependant, certaines parties ne pouvaient être prédites lorsque le projet
 était encore au stade de simple idée.
 Nous avons donc dû apporter des modifications à notre analyse descendante
 initiale, la version qui a été mise à jour se trouve en annexe du rapport.
 Les fonctions et procédures étant nombreuses dans notre programme, notre
 analyse descendante ne les englobe pas toutes et montre seulement les fonctions
 les plus importantes.
 Nous avons également veillé à séparer le code en plusieurs unités et à
 laisser des commentaires dans le but d'avoir un code lisible et compréhensible.
 Certains 
\begin_inset Quotes fld
\end_inset

writeln
\begin_inset Quotes frd
\end_inset

 qui ne sont pas utiles à l'exécution du code ont été ajoutés afin d'afficher
 du texte dans le terminal pour faciliter la compréhension du déroulement
 de la partie.
\end_layout

\begin_layout Subsection
Nommage
\end_layout

\begin_layout Standard
Afin que le code soit structuré et facile à comprendre, nous avons adopté
 une convention d'écriture qui suit les règles suivantes :
\end_layout

\begin_layout Itemize
Langue : l'écriture du code en anglais nous semble assez naturelle, pour
 des raisons d'homogénéité avec le langage de programmation lui-même.
 Cependant, afin de faciliter la compréhension du code lors de la correction,
 nous avons utilisé du français pour les commentaires.
 Ces derniers suivent une certaine structure.
 Pour un commentaire faisant office de titre :
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,numbers=left,breaklines=true,tabsize=4"
inline false
status open

\begin_layout Plain Layout

// - Section
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// - - Sous-section
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Commentaire standard.
\end_layout

\begin_layout Plain Layout

Procedure Station_Render();
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Constantes : Les constantes ont en général leur nom qui commence par l'identifia
nt de l'élément concerné.
 Cependant, dans le cas des chemins des fichiers, les constantes commencent
 par 
\begin_inset Quotes fld
\end_inset

Path_
\begin_inset Quotes frd
\end_inset

 suivi du type de l’élément concerné (Image, Police, Musique).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,numbers=left,breaklines=true,tabsize=4"
inline false
status open

\begin_layout Plain Layout

Const Station_Overfill_Timer = 20;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Const Path_Image_Station_Circle = '/Resources/Images/Station_Circle.png'
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Types : Tout type porte d'abord comme identifiant Type_ suivi de l'identifiant
 du type.
 Cet identifiant doit être le plus court et le plus explicite possible.
 Par exemple, la structure contenant une station s'appelle Type_Station
 .
 Dans le cas d'un type pointeur, il suffit de rajouter _Pointer au nom du
 type de base :
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,numbers=left,breaklines=true,tabsize=4"
inline false
status open

\begin_layout Plain Layout

Type Type_Station = Record
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

End;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Type Type_Station_Pointer = ^Type_Station;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Fonctions et procédures : Les fonctions et procédures portent généralement
 le nom de l'objet sur lequel elles agissent ou de l'unité concernée, suivi
 d'un verbe (en général : Get , Set , Refresh , Render ...) indiquant l'action
 effectuée et est éventuellement suivi de précisions sur l'action :
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,numbers=left,breaklines=true,tabsize=4"
inline false
status open

\begin_layout Plain Layout

// Procedure rafraichissant les graphismes
\end_layout

\begin_layout Plain Layout

Procedure Graphics_Refresh();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Procedure qui rend graphiquement une station
\end_layout

\begin_layout Plain Layout

Procedure Station_Render();
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Structure générale
\end_layout

\begin_layout Standard
Le projet est structuré en plusieurs fichiers de la manière suivante (voir
 annexes) :
\end_layout

\begin_layout Itemize

\series bold
Unit_Types :
\series default
 Unité contenant tout les types
\end_layout

\begin_layout Itemize

\series bold
Unit_Constants :
\series default
 Unité contenant toutes les constantes du jeu.
\end_layout

\begin_layout Itemize

\series bold
Unit_Common :
\series default
 Unité contenant toutes les fonctions 
\begin_inset Quotes fld
\end_inset

élémentaires
\begin_inset Quotes frd
\end_inset

 permettant de simplifier le développement dans les autres unités.
\end_layout

\begin_layout Itemize

\series bold
Unit_Mouse :
\series default
 Unité regroupant toutes les fonctions responsables de la prise en charge
 de la souris.
\end_layout

\begin_layout Itemize

\series bold
Unit_Animation :
\series default
 Unité regroupant toutes les fonctions responsables des animations (déplacement
 des trains...).
\end_layout

\begin_layout Itemize

\series bold
Unit_Graphics :
\series default
 Unité regroupant toutes les fonctions relatives aux graphismes.
\end_layout

\begin_layout Itemize

\series bold
Unit_Logic :
\series default
 Unité regroupant toute la logique du jeu.
 C'est l'unité 
\begin_inset Quotes fld
\end_inset

mère
\begin_inset Quotes frd
\end_inset

 du jeu, celle qui est directement inclue dans le programme principal :
 
\begin_inset Quotes fld
\end_inset

INSAtram.pas
\begin_inset Quotes frd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Organisation
\end_layout

\begin_layout Subsection
Outils utilisés
\end_layout

\begin_layout Standard
Ce projet étant un projet plus complexe que ce que nous avons eu à programmer
 jusqu'ici, nous avons fait appel à plusieurs outils afin de répondre au
 mieux à ses besoins.
 Voici la liste des outils utilisés pour le développement du jeu :
\end_layout

\begin_layout Itemize
Visual Studio Code : Un éditeur de code, open source et gratuit, très extensible
 et personnalisable.
\end_layout

\begin_layout Itemize
Git : Logiciel de gestion de répertoire de code, open source et performant.
\end_layout

\begin_layout Itemize
GitHub : Plateforme en ligne d'hébergement de répertoire de code Git.
\end_layout

\begin_layout Itemize
Live Share : Une extension de Visual Studio Code permettant une collaboration
 en direct (à la manière d'un Google Docs).
\end_layout

\begin_layout Itemize
Ptop : Le formateur de code fourni avec le Free Pascal Compiler.
\end_layout

\begin_layout Itemize
Inkscape : Logiciel de dessin vectoriel utilisé pour la création des ressources
 graphiques du jeu.
\end_layout

\begin_layout Itemize
Mermaid : Outil de création dynamique de diagrammes et de graphiques utilisé
 pour la création de l'analyse descendante.
\end_layout

\begin_layout Itemize
LyX : Logiciel libre d’édition de documents techniques.
 Nous l'avons utilisé pour la rédaction du présent rapport.
\end_layout

\begin_layout Subsection
Répartition
\end_layout

\begin_layout Standard
Afin d'avoir une répartition du travail la plus homogène possible, nous
 avons adopté une méthode similaire à la méthode 
\begin_inset Quotes fld
\end_inset

Agile
\begin_inset Quotes frd
\end_inset

.
 C'est-à-dire que nous avons essayé de diviser le cahier des charges en
 tâches élémentaires.
 Ces tâches étaient disposées sur un tableau virtuel dans le but de les
 rendre accessibles à chaque membre du groupe.
 Puis, chaque personne pouvait récupérer une tâche dès que la précédente
 était implémentée, testée et validée par les autres.
 Cette méthode permettait alors à chacun d'explorer différentes parties
 du développement et d'avoir une vision d'ensemble quant à l'avancement
 du projet.
 Cependant, certaines tâches nécessitaient des calculs et raisonnements
 complexes, dans ces cas-là, nous étions au moins deux à travailler dessus.
 De ce fait, il serait difficile d'établir une liste exhaustive des tâches
 effectuées par chaque membre du groupe.
 
\end_layout

\begin_layout Standard
Il était parfois difficile de faire correspondre nos emplois du temps respectifs.
 Alors, pour ne pas avoir à être systématiquement en présentiel pour pouvoir
 travailler ensemble sur le projet, nous avons utilisé des outils tels que
 Git et GitHub pour la gestion du répertoire de code et LiveShare afin de
 collaborer le plus facilement possible.
 C'est pour cette raison que nous avons utilisé l'éditeur de code Visual
 Studio Code.
 Bien sûr, en cas de problème difficile à résoudre (voir section 4), nous
 nous concertions et élaborions une solution ensemble.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Difficultés rencontrées
\end_layout

\begin_layout Subsection
Traçage des lignes
\end_layout

\begin_layout Subsubsection
Géométrie des lignes
\end_layout

\begin_layout Standard
Afin de donner un aspect de plan de métro aux lignes de tram, l'affichage
 des lignes doit se faire uniquement avec des droites horizontales, verticales
 et obliques (45°).
 Ce problème, qui nous semblait assez abstrait au premier abord, était finalemen
t relativement simple à résoudre avec une disjonction des cas possibles
 (en fonction des angles entre deux stations données).
 Ainsi, nous avons pu déterminer la position intermédiaire à partir des
 coordonnées centrées des stations et en utilisant de la trigonométrie de
 base.
 
\end_layout

\begin_layout Subsubsection
Épaisseur des lignes
\end_layout

\begin_layout Standard
Plus tard dans le développement, nous nous sommes rendu compte que le traçage
 de lignes sans épaisseur (fonction 
\begin_inset Quotes fld
\end_inset

lineRGBA
\begin_inset Quotes frd
\end_inset

 de l'unité 
\begin_inset Quotes fld
\end_inset

SDL GFX
\begin_inset Quotes frd
\end_inset

) rendait les lignes peu distinguables du reste.
 Or la SDL ne supporte pas nativement le traçage des lignes d'une épaisseur
 donnée.
 Nous nous sommes penchés sur l'unité 
\begin_inset Quotes fld
\end_inset

SDL GFX
\begin_inset Quotes frd
\end_inset

 qui possède une fonction 
\begin_inset Quotes fld
\end_inset

thickLineRGBA
\begin_inset Quotes frd
\end_inset

 permettant de dessiner des lignes avec une épaisseur.
 Malheureusement, les liens entre l'implémentation C de la SDL et le Free
 Pascal Compiler étant incomplets, la fonction n'était pas accessible en
 Free Pascal.
 Ce souci n'ayant pas été anticipé, nous avons donc dû réfléchir à une solution
 simple pour contourner le problème.
 Ainsi, à partir de la fonction 
\begin_inset Quotes fld
\end_inset

lineRGBA
\begin_inset Quotes frd
\end_inset

 et de l'angle de la ligne, nous avons dessiné des lignes superposées les
 unes par rapport aux autres.
 Il est ainsi possible de créer une ligne épaisse.
 Dans le cas de lignes verticales et horizontales, il est assez aisé de
 dessiner une ligne épaisse en incrémentant et décrémentant 
\begin_inset Formula $x$
\end_inset

 ou 
\begin_inset Formula $y$
\end_inset

 autour du centre de la ligne.
 Cependant, dans le cas de lignes obliques, ce raisonnement n'est pas valide.
\end_layout

\begin_layout Subsection
Résolution des itinéraires des passagers
\end_layout

\begin_layout Standard
Toute la difficulté du jeu reposant sur la performance du réseau créé, il
 était impératif pour nous que les passagers fassent preuve d'intelligence
 dans leur choix d'itinéraire.
 Dans le cas contraire, il n'y a aucune incitation à construire un plan
 de réseau efficace.
 La recherche du plus court chemin est un problème informatique classique,
 et de nombreux algorithmes existent pour sa résolution.
 Nous ne sommes pas mathématiciens ni chercheurs, alors nous avons décidé
 d'en adopter un assez connu : l'algorithme de Dijkstra.
 Cet algorithme est supposé être de complexité 
\begin_inset Formula $\text{O}\left(\left(n+a\right)log\left(n\right)\right)$
\end_inset

.
 Cependant, étant donné que nous avons fait l'implémentation de cet algorithme
 assez théorique nous-même, en s'inspirant seulement de son fonctionnement
 quand il est exécuté à la main, il serait très peu surprenant d'apprendre
 que sa complexité s'en soit trouvée agrandie.
 L'écriture des fonctions et procédures liées à la résolution d'itinéraire
 en elle-même n'a pas présenté de difficulté majeure, l'algorithme n'étant
 pas excessivement compliqué à appréhender.
 En revanche, toutes les subtilités d'allocation mémoire, les tableaux sur
 plusieurs dimensions, la rigueur dans le choix des indexes, ou bien la
 fragmentation des différentes tâches pré-requises à l'exécution de Dijkstra
 dans de nombreuses fonctions, eux, ont été sources de bugs ayant nécessité
 de longues heures de débogage.
 A l'heure d'écrire ce rapport, à de rares occasions, des bugs subsistent
 toujours et produisent parfois des itinéraires incohérents.
 Le taux d’occurrence de ces derniers étant faible, la jouabilité est faiblement
 impactée.
 Aucune solution n'a été trouvée pour l'heure.
 De la même manière, lorsqu'elle est confrontée à une correspondance, il
 arrive que la fonction responsable de la montée des passagers, 
\begin_inset Quotes fld
\end_inset

Passengers_Get_On
\begin_inset Quotes frd
\end_inset

, ne fasse pas monter le passager dans le nouveau wagon.
\end_layout

\begin_layout Subsection
Animation réaliste des trains
\end_layout

\begin_layout Standard
Afin que le mouvement des trains soit réaliste, au lieu d'une vitesse constante,
 nous avons opté pour une vitesse variable dépendant du temps.
 Le but étant de mimer le déplacement d'un véhicule réel.
 On définit alors deux constante : 
\begin_inset Formula $t_{a}$
\end_inset

 qui est le temps pris par le train pour accélérer, et 
\begin_inset Formula $v_{m}$
\end_inset

 la vitesse maximale du train.
 Ainsi, pour le déplacement du véhicule, on peu définir trois périodes :
\end_layout

\begin_layout Itemize
L'accélération : entre 
\begin_inset Formula $0$
\end_inset

 et 
\begin_inset Formula $t_{a}$
\end_inset

, la vitesse du train augmente linéairement jusqu'à atteindre : 
\begin_inset Formula $v_{m}$
\end_inset

.
\end_layout

\begin_layout Itemize
Croisière : entre 
\begin_inset Formula $t_{a}$
\end_inset

 et 
\begin_inset Formula $t_{d}$
\end_inset

, la vitesse du train est constante et maximale : 
\begin_inset Formula $v_{m}$
\end_inset

.
\end_layout

\begin_layout Itemize
Décélération : entre 
\begin_inset Formula $t_{d}$
\end_inset

 et 
\begin_inset Formula $t_{d}+t_{a}$
\end_inset

, la vitesse du train diminue linéairement jusqu'à atteindre : 
\begin_inset Formula $v_{m}$
\end_inset

 .
\end_layout

\begin_layout Standard
Soit 
\begin_inset Formula $t\in\left[0,t_{d}+t_{a}\right]$
\end_inset

 le temps écoulé depuis le départ du train.
 Avec ces 3 périodes on peut définir la fonction vitesse définie par morceau
 :
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v(t)=\begin{cases}
v_{1}\left(t\right)=t\times\frac{v_{m}}{t_{a}} & \text{si }0\leqslant t\leqslant t_{a}\\
v_{2}\left(t\right)=v_{m} & \text{si }t_{a}<t\leqslant t_{d}\\
v_{3}\left(t\right)=\left(t-t_{d}\right)\times\frac{-v_{m}}{t_{a}}+v_{m} & \text{si }t_{d}<t\leqslant t_{d}+t_{a}
\end{cases},\forall t\in\left[0,t_{d}+t_{a}\right]
\]

\end_inset


\end_layout

\begin_layout Standard
Ce qui nous intéresse, c'est d'obtenir la position du train en fonction
 de 
\begin_inset Formula $t$
\end_inset

.
 D'après nos cours de mécanique du point, la vitesse est la dérivée de la
 distance par le temps.
 On a donc : 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v\left(t\right)=\frac{d}{dt}d\left(t\right)\Leftrightarrow d\left(t\right)=\int v\left(t\right)dt
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
d\left(t\right)=\begin{cases}
d_{1}\left(t\right)=\int_{0}^{t}v_{1}\left(t\right)=\frac{t²}{2t_{a}}*v_{m} & \text{si }0\leqslant t\leqslant t_{a}\\
d_{2}\left(t\right)=d_{1}\left(t_{a}\right)+\int_{t_{a}}^{t}v_{2}\left(t\right)=d_{1}\left(t_{a}\right)+\left(t-t_{a}\right)*v_{m} & \text{si }t_{a}<t\leqslant t_{d}\\
d_{3}\left(t\right)=d_{2}\left(t_{2}\right)+\int_{t_{d}}^{t}v_{3}\left(t\right)=d_{2}\left(t_{2}\right)+\left(t-t_{d}\right)v_{m}-\frac{v_{m}t²}{2t_{a}} & \text{si }t_{d}<t\leqslant t_{d}+t_{a}
\end{cases},\forall t\in\left[0,t_{d}+t_{a}\right]
\]

\end_inset


\end_layout

\begin_layout Standard
Maintenant que nous avons la distance en fonction du temps, il suffit d'implémen
ter 
\begin_inset Formula $d_{1}$
\end_inset

, 
\begin_inset Formula $d_{2}$
\end_inset

 et 
\begin_inset Formula $d_{3}$
\end_inset

.
 On utilise des instructions conditionnelles pour déterminer laquelle utiliser
 en fonction du temps et des domaines de définition de chacune.
\end_layout

\begin_layout Subsection
Optimisations
\end_layout

\begin_layout Standard
Au fur et à mesure que le projet avançait et que les ressources graphiques
 se multipliaient.
 Nous nous sommes heurtés à un problème de performance qui affectait la
 fluidité du jeu.
 Ainsi, après quelques recherches, nous avons procédé à des optimisations
 : 
\end_layout

\begin_layout Itemize
Tout d'abord, lorsque la SDL crée des surfaces à partir d'images importées,
 ces dernières ont un format de pixel (profondeur de couleur, masques, canal
 alpha ...) qui n’est pas forcément le même que celui de l'affichage.
 Or, lors du rendu avec « SDL_BlitSurface », la SDL doit effectuer une conversio
n à la volée pour rendre la surface sur l'écran.
 Cette conversion nécessite beaucoup de temps de calcul.
 Cependant, il est possible de s'affranchir de cette conversion en convertissant
 dès l'import des ressources graphiques.
 Cette conversion est alors effectuée avec la fonction « SDL_DisplayFormat »
 qui prend pour paramètre la surface à convertir, et renvoie une nouvelle
 surface, qui est la surface convertie.
\end_layout

\begin_layout Itemize
Ensuite, il est possible d'utiliser l'accélération matérielle graphique
 pour certains calculs graphiques (anti-crénelage, les calculs géométriques,
 la copie de mémoire...).
 Pour activer cette fonctionnalité, il faut remplacer l'option « SDL_SWSURFACE »
 par « SDL_HWSURFACE » dans la fonction qui instancie la fenêtre : « SDL_SetVide
oMode ».
 Cependant, cette optimisation est conditionnée au support de certaines
 interfaces de programmation (API) graphiques spécifiques au matériel et
 aux pilotes d'une machine.
 Ainsi, sur des configurations plus 
\begin_inset Quotes fld
\end_inset

exotiques
\begin_inset Quotes frd
\end_inset

 ou anciennes, il se peut que des problèmes de compatibilité empêchent le
 lancement du jeu.
\end_layout

\begin_layout Itemize
Enfin, nous avons minimisé le nombre de calculs graphiques en ne les effectuant
 que lorsque c’était nécessaire.
 Par exemple, les étiquettes et chronomètres sont pré-rendus lorsqu’ils
 sont modifiés ou encore les positions intermédiaires sont pré-calculées
 lors des modifications des lignes.
 Le rafraîchissement des graphismes étant appelé très souvent (toutes les
 1/60 secondes), il fallait diminuer au maximum les calculs nécessaires
 à l’affichage.
\end_layout

\begin_layout Subsection
Interface graphique
\end_layout

\begin_layout Standard
Une interface graphique est nécessaire pour que l'utilisateur puisse interagir
 avec le jeu.
 Or, la SDL est une librairie très rudimentaire en termes de fonctionnalités.
 Ainsi, nous avons créé une abstraction pour les différents éléments de
 l'interface graphique (boutons, étiquettes, panneau etc) afin d'améliorer
 la lisibilité du code.
\end_layout

\begin_layout Subsection
Manque de temps
\end_layout

\begin_layout Standard
Les fonctionnalités obligatoires que nous souhaitions implémenter au début
 du projet ont pu être réalisées.
 Cependant, par manque de temps, beaucoup de fonctionnalités optionnelles
 n'ont pas pu être développées.
 Par exemple, la fonctionnalité 
\begin_inset Quotes fld
\end_inset

Chargement/Sauvegarde Partie
\begin_inset Quotes frd
\end_inset

 présente dans la première analyse descendante a été abandonnée.
 En effet, la gestion de la mémoire pour ce projet étant surtout dynamique,
 nous avons estimé que se lancer dans l'implémentation d'un système de sauvegard
e de la partie ne serait pas une idée très sage.
 Le type 
\begin_inset Quotes fld
\end_inset

arcade
\begin_inset Quotes frd
\end_inset

 du jeu ne s'y prête de toute manière pas vraiment.
 Ce manque de temps nous a également empêché de réaliser certaines optimisations
 dans le code, notamment pour garder en mémoire les itinéraires afin de
 réduire le nombre de fois où l'on calcule les itinéraires.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
La réalisation de ce projet nous semblait compliquée voire impossible lorsque
 le concept nous a été expliqué.
 Néanmoins, cela nous a poussé à faire preuve d'autonomie et à avoir une
 bonne organisation afin de respecter notre cahier des charges.
 C'était une introduction efficace et parfois périlleuse à la gestion de
 projet mais également un moyen de développer nos compétences en algorithmie
 et de découvrir certains concepts que nous n'avions pas eu l'occasion d'explore
r en cours l'année dernière.
 Nous avons également rencontré plusieurs difficultés au cours de la réalisation
 du projet ce qui nous a poussé à faire preuve d'ingéniosité et à faire
 des recherches pour trouver des solutions adaptées aux problèmes qui sont
 survenus.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Annexes
\end_layout

\begin_layout Subsection
Guide d'utilisation
\end_layout

\begin_layout Standard
Au lancement du jeu, un menu de démarrage vous est présenté, vous pouvez
 choisir de quitter ou bien de jouer.
 Si vous choisissez de jouer, une partie est lancée et des stations et passagers
 apparaissent.
 Les passagers sont de la forme de leur station de destination.
 Chaque station est supposée accueillir 6 passagers, au-delà de ce seuil,
 un chronomètre est lancé et vous avez alors 40 secondes pour désengorger
 la station, sans quoi la partie se termine.
 Pour mener à bien cet objectif, vous disposez d’une ligne sélectionnable
 par un clic gauche, celle-ci se situe en bas de votre écran et se repère
 à sa couleur.
 Pour relier vos stations, sélectionnez la ligne de votre choix, puis, cliquez
 et déplacez la ligne d’un point de départ à un point d’arrivée.
 Si vous souhaitez changer le tracé de la ligne sélectionnée, vous n’avez
 qu’à cliquer sur ce dernier et à le faire glisser sur une station à desservir.
 Pour supprimer une station d’un tracé, sélectionnez la ligne, puis, cliquez
 sur la station en question.
 Vous ne pouvez pas supprimer la première station d'une ligne.
 Une fois votre tracé effectué, vous pouvez le peupler de trains et de wagons.
 Au début de la partie, sur la partie gauche de votre écran, vous remarquerez
 la présence de jetons échangeables contre des locomotives, des wagons ou
 des tunnels.
 Le jeton 
\begin_inset Quotes fld
\end_inset

tunnel
\begin_inset Quotes frd
\end_inset

 sera directement déduit de votre inventaire lorsque votre ligne traversera
 une rivière.
 Pour finaliser la rame, vous devrez vous saisir à l’aide d’un clic gauche
 du jeton 
\begin_inset Quotes fld
\end_inset

locomotive
\begin_inset Quotes frd
\end_inset

 et le glisser-déposer sur le tracé précédemment créé.
 Cette locomotive dispose d’une capacité de 6 passagers.
 Si vous souhaitez augmenter ce nombre, vous pouvez glisser-déposer un jeton
 
\begin_inset Quotes fld
\end_inset

wagon
\begin_inset Quotes frd
\end_inset

 sur cette locomotive, ceci aura pour effet d’ajouter 6 places au train.
 Au fur et à mesure que le temps s’écoule, à intervalles réguliers, des
 bonus de fin de semaine vous seront distribués, vous devrez alors choisir
 lequel vous convient le mieux parmi différents choix (nouvelle ligne, wagon
 supplémentaire, …).
 Enfin, tout au long de la partie, il est possible de mettre le jeu en pause,
 ou bien de recommencer la partie (en haut à droite de votre écran).
\end_layout

\begin_layout Subsection
Analyse descendante
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphiques/Functions.png
	width 70page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Analyse descendante simplifiée
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,numbers=left,breaklines=true,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

Procedure Logic_Load(Var Game : Type_Game);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Procedure Logic_Refresh(Var Game : Type_Game);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Procedure Animation_Load(Var Animation : Type_Animation);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Procedure Animation_Refresh(Var Game : Type_Game);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Procedure Mouse_Load(Var Mouse : Type_Mouse);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Procedure Mouse_Event_Handler(Mouse_Event : TSDL_MouseButtonEvent; Var Game
 : Type_Game);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Procedure Sounds_Load(Var Game : Type_Game);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Procedure Graphics_Unload(Var Game : Type_Game);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Procedure Graphics_Refresh(Var Game : Type_Game);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphiques/AnalyseDescendanteGestionItineraires.png
	width 70page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Gestion des itinéraires
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,numbers=left,breaklines=true,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

// Fonction qui détermine si le passager doit descendre du train (autrement
 dit, si il a atteint sa destination).
\end_layout

\begin_layout Plain Layout

Function Passenger_Get_Off(Passenger : Type_Passenger_Pointer; Var Next_Station
 : Type_Station; Var Current_Station : Type_Station) : Boolean;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Fonction qui détermine si le passager doit monter dans un train.
\end_layout

\begin_layout Plain Layout

Function Passenger_Get_On(Passenger : Type_Passenger_Pointer; Var Next_Station
 : Type_Station; Var Current_Station : Type_Station) : Boolean;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Procédure qui construit le tableau des liens entres les stations.
\end_layout

\begin_layout Plain Layout

Procedure Game_Refresh_Graph_Table(Var Game : Type_Game);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Procédure qui calcule l'itinéaire des stations correspondant à la forme
 du passager, puis détermine la plus "proche" en prenant l'itinéraire le
 plus court.
\end_layout

\begin_layout Plain Layout

Procedure Passengers_Compute_Itinerary(Game : Type_Game);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Procedure déterminant le plus court chemin entre deux stations données.
\end_layout

\begin_layout Plain Layout

Procedure Dijkstra(Starting_Station_Index : Integer; Ending_Station_Index
 : Integer; Var Itinerary_Indexes : Type_Itinerary_Indexes; Var Reverse_Itinerar
y_Indexes : Type_Itinerary_Indexes; Game : Type_Game; Var Station_Is_Isolated
 : Boolean);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Fonction qui signale à l'algorithme de Dijkstra que le calcul d'itinéraire
 est arrivé à destination.
\end_layout

\begin_layout Plain Layout

Function Destination_Reached(Index_Ending_Station : Byte; Dijkstra_Table
 : Type_Dijkstra_Table): Boolean;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Procédure qui inscrit dans le tableau de Dijkstra avec quelles stations
 une station donnée peut se connecter.
\end_layout

\begin_layout Plain Layout

Procedure Connect_Stations(Step : Byte; indexStationToConnect : Byte; Game
 : Type_Game);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Fonction qui calcule le poids d'un trajet entre deux stations connectées.
\end_layout

\begin_layout Plain Layout

Function Get_Weight(Var Station_1, Station_2 : Type_Station): Integer;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Procédure qui renvoie toutes les stations qui ont la même forme que le
 passager donné.
\end_layout

\begin_layout Plain Layout

Procedure Get_Ending_Stations_From_Shape(Game : Type_Game; Passenger : Type_Pass
enger_Pointer; Var Index_Table : Type_Index_Table);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Fonction qui calcule le poids (la distance) d'un itinéraire complet.
\end_layout

\begin_layout Plain Layout

Function Itinerary_Get_Weight(Game : Type_Game; Itinerary_Indexes : Type_Itinera
ry_Indexes) : Integer;
\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphiques/Dépendances.png
	width 70page%
	BoundingBox 0bp 0bp 1116bp 859bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Interdépendances des unités
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
